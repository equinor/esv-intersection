{"version":3,"file":"wellborepath-layer.stories.08961eda.js","sources":["../../../../.storybook/src/features/wellborepath-layer.stories.ts"],"sourcesContent":["import { WellborepathLayer, WellborepathLayerOptions, OnRescaleEvent, ZoomPanHandler, IntersectionReferenceSystem, Controller } from '../../../src';\nimport { getWellborePath } from '../data';\nimport { createRootContainer, createLayerContainer, createFPSLabel } from '../utils';\nconst width: number = 700;\nconst height: number = 600;\nexport const WellborepathUsingLowLevelInterface = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  const fpsLabel = createFPSLabel();\n  getWellborePath().then(data => {\n    const referenceSystem = new IntersectionReferenceSystem(data);\n    const options: WellborepathLayerOptions<[number, number][]> = {\n      order: 1,\n      strokeWidth: '2px',\n      stroke: 'black',\n      referenceSystem\n    };\n    const wellborePathLayer = new WellborepathLayer('wellborepath', options);\n    wellborePathLayer.onMount({\n      elm: container,\n      width,\n      height\n    });\n    const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\n      wellborePathLayer.onRescale(event);\n    });\n    zoomHandler.setBounds([0, 1000], [0, 1000]);\n    zoomHandler.adjustToSize(width, height);\n    zoomHandler.setViewport(1000, 1000, 5000);\n    root.appendChild(container);\n    root.appendChild(fpsLabel);\n  });\n  return root;\n};\nexport const WellborepathUsingHighLevelInterface = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  const fpsLabel = createFPSLabel();\n  getWellborePath().then(data => {\n    const referenceSystem = new IntersectionReferenceSystem(data);\n    const options: WellborepathLayerOptions<[number, number][]> = {\n      order: 1,\n      strokeWidth: '2px',\n      stroke: 'black',\n      referenceSystem\n    };\n    const wellborePathLayer = new WellborepathLayer('wellborepath', options);\n    const controller = new Controller({\n      container,\n      layers: [wellborePathLayer]\n    });\n    controller.setBounds([0, 1000], [0, 1000]);\n    controller.adjustToSize(width, height);\n    controller.setViewport(1000, 1000, 5000);\n    root.appendChild(container);\n    root.appendChild(fpsLabel);\n  });\n  return root;\n};\nexport default {\n  title: 'ESV Intersection/Features/Wellborepath',\n  component: WellborepathUsingLowLevelInterface\n};\nWellborepathUsingLowLevelInterface.parameters = {\n  ...WellborepathUsingLowLevelInterface.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  const fpsLabel = createFPSLabel();\\n  getWellborePath().then(data => {\\n    const referenceSystem = new IntersectionReferenceSystem(data);\\n    const options: WellborepathLayerOptions<[number, number][]> = {\\n      order: 1,\\n      strokeWidth: '2px',\\n      stroke: 'black',\\n      referenceSystem\\n    };\\n    const wellborePathLayer = new WellborepathLayer('wellborepath', options);\\n    wellborePathLayer.onMount({\\n      elm: container,\\n      width,\\n      height\\n    });\\n    const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\\n      wellborePathLayer.onRescale(event);\\n    });\\n    zoomHandler.setBounds([0, 1000], [0, 1000]);\\n    zoomHandler.adjustToSize(width, height);\\n    zoomHandler.setViewport(1000, 1000, 5000);\\n    root.appendChild(container);\\n    root.appendChild(fpsLabel);\\n  });\\n  return root;\\n}\",\n    ...WellborepathUsingLowLevelInterface.parameters?.storySource\n  }\n};\nWellborepathUsingHighLevelInterface.parameters = {\n  ...WellborepathUsingHighLevelInterface.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  const fpsLabel = createFPSLabel();\\n  getWellborePath().then(data => {\\n    const referenceSystem = new IntersectionReferenceSystem(data);\\n    const options: WellborepathLayerOptions<[number, number][]> = {\\n      order: 1,\\n      strokeWidth: '2px',\\n      stroke: 'black',\\n      referenceSystem\\n    };\\n    const wellborePathLayer = new WellborepathLayer('wellborepath', options);\\n    const controller = new Controller({\\n      container,\\n      layers: [wellborePathLayer]\\n    });\\n    controller.setBounds([0, 1000], [0, 1000]);\\n    controller.adjustToSize(width, height);\\n    controller.setViewport(1000, 1000, 5000);\\n    root.appendChild(container);\\n    root.appendChild(fpsLabel);\\n  });\\n  return root;\\n}\",\n    ...WellborepathUsingHighLevelInterface.parameters?.storySource\n  }\n};"],"names":["width","height","WellborepathUsingLowLevelInterface","root","createRootContainer","container","createLayerContainer","fpsLabel","createFPSLabel","getWellborePath","data","options","IntersectionReferenceSystem","wellborePathLayer","WellborepathLayer","zoomHandler","ZoomPanHandler","event","WellborepathUsingHighLevelInterface","controller","Controller","wellborepathLayer_stories","_a"],"mappings":"0RAGA,MAAMA,EAAgB,IAChBC,EAAiB,IACVC,EAAqC,IAAM,CAChD,MAAAC,EAAOC,EAAoBJ,CAAK,EAChCK,EAAYC,EAAqBN,EAAOC,CAAM,EAC9CM,EAAWC,IACD,OAAAC,EAAA,EAAE,KAAaC,GAAA,CAE7B,MAAMC,EAAwD,CAC5D,MAAO,EACP,YAAa,MACb,OAAQ,QACR,gBALsB,IAAIC,EAA4BF,CAAI,CAK1D,EAEIG,EAAoB,IAAIC,EAAkB,eAAgBH,CAAO,EACvEE,EAAkB,QAAQ,CACxB,IAAKR,EACL,MAAAL,EACA,OAAAC,CAAA,CACD,EACD,MAAMc,EAAc,IAAIC,EAAeX,EAAYY,GAA0B,CAC3EJ,EAAkB,UAAUI,CAAK,CAAA,CAClC,EACWF,EAAA,UAAU,CAAC,EAAG,GAAI,EAAG,CAAC,EAAG,GAAI,CAAC,EAC9BA,EAAA,aAAaf,EAAOC,CAAM,EAC1Bc,EAAA,YAAY,IAAM,IAAM,GAAI,EACxCZ,EAAK,YAAYE,CAAS,EAC1BF,EAAK,YAAYI,CAAQ,CAAA,CAC1B,EACMJ,CACT,EACae,EAAsC,IAAM,CACjD,MAAAf,EAAOC,EAAoBJ,CAAK,EAChCK,EAAYC,EAAqBN,EAAOC,CAAM,EAC9CM,EAAWC,IACD,OAAAC,EAAA,EAAE,KAAaC,GAAA,CAE7B,MAAMC,EAAwD,CAC5D,MAAO,EACP,YAAa,MACb,OAAQ,QACR,gBALsB,IAAIC,EAA4BF,CAAI,CAK1D,EAEIG,EAAoB,IAAIC,EAAkB,eAAgBH,CAAO,EACjEQ,EAAa,IAAIC,EAAW,CAChC,UAAAf,EACA,OAAQ,CAACQ,CAAiB,CAAA,CAC3B,EACUM,EAAA,UAAU,CAAC,EAAG,GAAI,EAAG,CAAC,EAAG,GAAI,CAAC,EAC9BA,EAAA,aAAanB,EAAOC,CAAM,EAC1BkB,EAAA,YAAY,IAAM,IAAM,GAAI,EACvChB,EAAK,YAAYE,CAAS,EAC1BF,EAAK,YAAYI,CAAQ,CAAA,CAC1B,EACMJ,CACT,EACekB,EAAA,CACb,MAAO,yCACP,UAAWnB,CACb,QACAA,EAAmC,WAAa,CAC9C,GAAGA,EAAmC,WACtC,YAAa,CACX,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACR,IAAGoB,EAAApB,EAAmC,aAAnC,YAAAoB,EAA+C,WACpD,CACF,QACAJ,EAAoC,WAAa,CAC/C,GAAGA,EAAoC,WACvC,YAAa,CACX,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACR,IAAGI,EAAAJ,EAAoC,aAApC,YAAAI,EAAgD,WACrD,CACF"}