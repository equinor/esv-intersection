{"version":3,"file":"zoom.stories-1f200c83.js","sources":["../../../../.storybook/src/features/zoom.stories.ts"],"sourcesContent":["import { select, Selection } from 'd3-selection';\nimport { ZoomPanHandler, GridLayer, Axis, OnRescaleEvent, OnUpdateEvent, CanvasLayer, LayerOptions } from '../../../src';\nimport { createFPSLabel, createRootContainer, createLayerContainer } from '../utils';\nconst width = 600;\nconst height = 400;\nfunction createButton(label: string, cb: any) {\n  const btn = document.createElement('button');\n  btn.innerHTML = label;\n  btn.setAttribute('style', 'width: 100px;height:32px;margin-top:12px;');\n  btn.onclick = cb;\n  return btn;\n}\nclass TestLayer extends CanvasLayer<unknown> {\n  constructor(id: string, options: LayerOptions<unknown>) {\n    super(id, options);\n    this.render = this.render.bind(this);\n  }\n  onRescale(event: OnRescaleEvent) {\n    super.onRescale(event);\n    this.render(event);\n  }\n  onUpdate(event: OnUpdateEvent<unknown>) {\n    super.onUpdate(event);\n    this.render(null);\n  }\n  render(event: OnRescaleEvent | null) {\n    const {\n      ctx\n    } = this;\n    if (!ctx) {\n      return;\n    }\n    if (!event) {\n      return;\n    }\n    // Get the bounds area\n    const [xb1, xb2] = event.xBounds;\n    const [yb1, yb2] = event.yBounds;\n    const x = event.xScale(xb1);\n    const y = event.yScale(yb1);\n    const w = event.xScale(xb2) - x;\n    const h = event.yScale(yb2) - y;\n\n    // Center\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n    const rx = Math.abs(x - event.xScale(event.xBounds[0] + 100));\n    const ry = rx * event.zFactor;\n\n    // Save and clear canvas\n    ctx.save();\n    ctx.clearRect(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\n\n    // Draw bounds\n    ctx.strokeStyle = 'green';\n    ctx.fillStyle = '#00002f';\n    ctx.lineWidth = event.transform.k;\n    ctx.beginPath();\n    ctx.rect(x, y, w, h);\n    ctx.fill();\n    ctx.stroke();\n\n    // Center of bounds\n    ctx.strokeStyle = 'grey';\n    ctx.fillStyle = 'dimgray';\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, rx, ry, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n    ctx.fillStyle = '#bbb';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, rx / 1.5, ry / 1.5, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    // Fixed rectangle scaled and moved by transform\n    // Note: the transformation does not take bounds into account which means this is at a different scale the x/yScale(v)\n    ctx.strokeStyle = 'black';\n    ctx.fillStyle = 'lightgray';\n    ctx.lineWidth = event.transform.k;\n    ctx.beginPath();\n    ctx.rect(10 * event.transform.k + event.transform.x, 10 * event.transform.k + event.transform.y, 300 * event.transform.k, 200 * event.transform.k);\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw some lines\n    // Note: the transformation does not take bounds into account which means this is at a different scale the x/yScale(v)\n    ctx.beginPath();\n    for (let i = 0; i < 4; i++) {\n      ctx.moveTo(20 * event.transform.k + event.transform.x, (i + 1) * 40 * event.transform.k + event.transform.y);\n      ctx.lineTo(300 * event.transform.k + event.transform.x, (i + 1) * 40 * event.transform.k + event.transform.y);\n    }\n    ctx.stroke();\n\n    // Set the translation on canvas so we can draw in bounds(world) coordinates\n    ctx.translate(event.transform.x, event.transform.y);\n    ctx.scale(event.xRatio, event.yRatio);\n\n    // Cross-hair at (0, 0)\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(-50, 0);\n    ctx.lineTo(50, 0);\n    ctx.moveTo(0, -50);\n    ctx.lineTo(0, 50);\n    ctx.stroke();\n\n    // Cross-hair at corner of bounds\n    ctx.beginPath();\n    ctx.moveTo(950, 1000);\n    ctx.lineTo(1050, 1000);\n    ctx.moveTo(1000, 950);\n    ctx.lineTo(1000, 1050);\n    ctx.stroke();\n\n    // Draw rectangle below center\n    ctx.fillStyle = 'gray';\n    ctx.beginPath();\n    ctx.rect(470, 700, 60, 220);\n    ctx.fill();\n    ctx.stroke();\n\n    //Restore canvas state\n    ctx.restore();\n  }\n}\n\n// export default {\n//   title: 'Zoom',\n// };\n\nexport const ZoomWithTestLayer = () => {\n  const root = document.createElement('div');\n  const container = document.createElement('div');\n  container.className = 'test-container';\n  container.setAttribute('style', `height: ${height}px; width: ${width}px;background-color: #eee;position: relative;`);\n  container.setAttribute('height', `${height}`);\n  container.setAttribute('width', `${width}`);\n  root.appendChild(container);\n  const testLayer = new TestLayer('test', {\n    order: 1\n  });\n  testLayer.onMount({\n    elm: container,\n    width,\n    height\n  });\n  const zoomHandler = new ZoomPanHandler(root, (event: OnRescaleEvent) => {\n    testLayer.onRescale(event);\n  });\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\n  zoomHandler.adjustToSize(width, height);\n  zoomHandler.zFactor = 1;\n  zoomHandler.setTranslateBounds([-5000, 6000], [-5000, 6000]);\n  zoomHandler.enableTranslateExtent = false;\n  zoomHandler.setViewport(500, 500, 3000);\n  const buttons = document.createElement('div');\n  //root.appendChild(buttons);\n  buttons.className = 'Buttons-container';\n  root.appendChild(createButton('500x500', () => {\n    const w = 500;\n    const h = 500;\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\n    container.setAttribute('height', `${h}`);\n    container.setAttribute('width', `${w}`);\n    zoomHandler.adjustToSize(w, h);\n  }));\n  root.appendChild(createButton('600x400', () => {\n    const w = 600;\n    const h = 400;\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\n    container.setAttribute('height', `${h}`);\n    container.setAttribute('width', `${w}`);\n    zoomHandler.adjustToSize(w, h);\n  }));\n  root.appendChild(createButton('800x600', () => {\n    const w = 800;\n    const h = 600;\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\n    container.setAttribute('height', `${h}`);\n    container.setAttribute('width', `${w}`);\n    zoomHandler.adjustToSize(w, h);\n  }));\n  root.appendChild(createButton('1:1', () => {\n    zoomHandler.zFactor = 1;\n  }));\n  root.appendChild(createButton('2:1', () => {\n    zoomHandler.zFactor = 2;\n  }));\n  root.appendChild(createButton('1:2', () => {\n    zoomHandler.zFactor = 0.5;\n  }));\n  root.appendChild(createButton('center', () => {\n    zoomHandler.setViewport(500, 500, undefined, 500);\n  }));\n  root.appendChild(createButton('reset', () => {\n    zoomHandler.zFactor = 1;\n    zoomHandler.setViewport(500, 500, 3000);\n  }));\n  root.appendChild(createFPSLabel());\n  return root;\n};\nexport const ZoomWithGridLayer = () => {\n  const root = document.createElement('div');\n  root.className = 'Test-container';\n  root.setAttribute('style', `height: ${height}px; width: ${width}px;background-color: #eee;`);\n  root.setAttribute('height', `${height}`);\n  root.setAttribute('width', `${width}`);\n  const gridLayer = new GridLayer('grid', {\n    majorColor: 'black',\n    minorColor: 'black',\n    majorWidth: 0.5,\n    minorWidth: 0.5,\n    order: 1\n  });\n  gridLayer.onMount({\n    elm: root,\n    width,\n    height\n  });\n  const zoomHandler = new ZoomPanHandler(root, (event: OnRescaleEvent) => {\n    gridLayer.onRescale(event);\n  });\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\n  zoomHandler.adjustToSize(width, height);\n  root.appendChild(createFPSLabel());\n  return root;\n};\nexport const ZoomWithGridAndAxis = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  const buttons = document.createElement('div');\n  const marginXAxis = 40;\n  const marginYAxis = 30;\n  const mainGroup = ((select(container).append('svg').attr('height', `${height}px`).attr('width', `${width}px`).style('position', 'absolute') as unknown) as Selection<SVGElement, unknown, null, undefined>);\n  const showLabels = true;\n  const axis = new Axis(mainGroup, showLabels, 'Displacement', 'TVD MSL', 'm');\n  const gridLayer = new GridLayer('grid', {\n    majorColor: 'black',\n    minorColor: 'black',\n    majorWidth: 0.5,\n    minorWidth: 0.5,\n    order: 1\n  });\n  gridLayer.onMount({\n    elm: container,\n    width,\n    height\n  });\n  const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\n    axis.onRescale(event);\n    gridLayer.onRescale(event);\n  });\n  zoomHandler.setMinZoomLevel(0.1);\n  zoomHandler.setMaxZoomLevel(10);\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\n  zoomHandler.adjustToSize(width - marginXAxis, height - marginYAxis);\n  buttons.appendChild(createButton('min zoom 1', () => {\n    zoomHandler.setMinZoomLevel(1);\n  }));\n  buttons.appendChild(createButton('max zoom 100', () => {\n    zoomHandler.setMaxZoomLevel(100);\n  }));\n  buttons.appendChild(createButton('reset', () => {\n    zoomHandler.setZoomLevelBoundary([0.1, 256]);\n  }));\n  root.appendChild(container);\n  root.appendChild(buttons);\n  root.appendChild(createFPSLabel());\n  return root;\n};\nexport default {\n  title: 'ESV Intersection/Features/Zoom',\n  component: ZoomWithTestLayer\n};\nZoomWithTestLayer.parameters = {\n  ...ZoomWithTestLayer.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = document.createElement('div');\\n  const container = document.createElement('div');\\n  container.className = 'test-container';\\n  container.setAttribute('style', `height: ${height}px; width: ${width}px;background-color: #eee;position: relative;`);\\n  container.setAttribute('height', `${height}`);\\n  container.setAttribute('width', `${width}`);\\n  root.appendChild(container);\\n  const testLayer = new TestLayer('test', {\\n    order: 1\\n  });\\n  testLayer.onMount({\\n    elm: container,\\n    width,\\n    height\\n  });\\n  const zoomHandler = new ZoomPanHandler(root, (event: OnRescaleEvent) => {\\n    testLayer.onRescale(event);\\n  });\\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\\n  zoomHandler.adjustToSize(width, height);\\n  zoomHandler.zFactor = 1;\\n  zoomHandler.setTranslateBounds([-5000, 6000], [-5000, 6000]);\\n  zoomHandler.enableTranslateExtent = false;\\n  zoomHandler.setViewport(500, 500, 3000);\\n  const buttons = document.createElement('div');\\n  //root.appendChild(buttons);\\n  buttons.className = 'Buttons-container';\\n  root.appendChild(createButton('500x500', () => {\\n    const w = 500;\\n    const h = 500;\\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\\n    container.setAttribute('height', `${h}`);\\n    container.setAttribute('width', `${w}`);\\n    zoomHandler.adjustToSize(w, h);\\n  }));\\n  root.appendChild(createButton('600x400', () => {\\n    const w = 600;\\n    const h = 400;\\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\\n    container.setAttribute('height', `${h}`);\\n    container.setAttribute('width', `${w}`);\\n    zoomHandler.adjustToSize(w, h);\\n  }));\\n  root.appendChild(createButton('800x600', () => {\\n    const w = 800;\\n    const h = 600;\\n    container.setAttribute('style', `height: ${h}px; width: ${w}px;background-color: #eee;`);\\n    container.setAttribute('height', `${h}`);\\n    container.setAttribute('width', `${w}`);\\n    zoomHandler.adjustToSize(w, h);\\n  }));\\n  root.appendChild(createButton('1:1', () => {\\n    zoomHandler.zFactor = 1;\\n  }));\\n  root.appendChild(createButton('2:1', () => {\\n    zoomHandler.zFactor = 2;\\n  }));\\n  root.appendChild(createButton('1:2', () => {\\n    zoomHandler.zFactor = 0.5;\\n  }));\\n  root.appendChild(createButton('center', () => {\\n    zoomHandler.setViewport(500, 500, undefined, 500);\\n  }));\\n  root.appendChild(createButton('reset', () => {\\n    zoomHandler.zFactor = 1;\\n    zoomHandler.setViewport(500, 500, 3000);\\n  }));\\n  root.appendChild(createFPSLabel());\\n  return root;\\n}\",\n    ...ZoomWithTestLayer.parameters?.storySource\n  }\n};\nZoomWithGridLayer.parameters = {\n  ...ZoomWithGridLayer.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = document.createElement('div');\\n  root.className = 'Test-container';\\n  root.setAttribute('style', `height: ${height}px; width: ${width}px;background-color: #eee;`);\\n  root.setAttribute('height', `${height}`);\\n  root.setAttribute('width', `${width}`);\\n  const gridLayer = new GridLayer('grid', {\\n    majorColor: 'black',\\n    minorColor: 'black',\\n    majorWidth: 0.5,\\n    minorWidth: 0.5,\\n    order: 1\\n  });\\n  gridLayer.onMount({\\n    elm: root,\\n    width,\\n    height\\n  });\\n  const zoomHandler = new ZoomPanHandler(root, (event: OnRescaleEvent) => {\\n    gridLayer.onRescale(event);\\n  });\\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\\n  zoomHandler.adjustToSize(width, height);\\n  root.appendChild(createFPSLabel());\\n  return root;\\n}\",\n    ...ZoomWithGridLayer.parameters?.storySource\n  }\n};\nZoomWithGridAndAxis.parameters = {\n  ...ZoomWithGridAndAxis.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  const buttons = document.createElement('div');\\n  const marginXAxis = 40;\\n  const marginYAxis = 30;\\n  const mainGroup = ((select(container).append('svg').attr('height', `${height}px`).attr('width', `${width}px`).style('position', 'absolute') as unknown) as Selection<SVGElement, unknown, null, undefined>);\\n  const showLabels = true;\\n  const axis = new Axis(mainGroup, showLabels, 'Displacement', 'TVD MSL', 'm');\\n  const gridLayer = new GridLayer('grid', {\\n    majorColor: 'black',\\n    minorColor: 'black',\\n    majorWidth: 0.5,\\n    minorWidth: 0.5,\\n    order: 1\\n  });\\n  gridLayer.onMount({\\n    elm: container,\\n    width,\\n    height\\n  });\\n  const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\\n    axis.onRescale(event);\\n    gridLayer.onRescale(event);\\n  });\\n  zoomHandler.setMinZoomLevel(0.1);\\n  zoomHandler.setMaxZoomLevel(10);\\n  zoomHandler.setBounds([0, 1000], [0, 1000]);\\n  zoomHandler.adjustToSize(width - marginXAxis, height - marginYAxis);\\n  buttons.appendChild(createButton('min zoom 1', () => {\\n    zoomHandler.setMinZoomLevel(1);\\n  }));\\n  buttons.appendChild(createButton('max zoom 100', () => {\\n    zoomHandler.setMaxZoomLevel(100);\\n  }));\\n  buttons.appendChild(createButton('reset', () => {\\n    zoomHandler.setZoomLevelBoundary([0.1, 256]);\\n  }));\\n  root.appendChild(container);\\n  root.appendChild(buttons);\\n  root.appendChild(createFPSLabel());\\n  return root;\\n}\",\n    ...ZoomWithGridAndAxis.parameters?.storySource\n  }\n};"],"names":["width","height","createButton","label","cb","btn","TestLayer","CanvasLayer","id","options","event","ctx","xb1","xb2","yb1","yb2","x","y","w","h","cx","cy","rx","ry","i","ZoomWithTestLayer","root","container","testLayer","zoomHandler","ZoomPanHandler","buttons","createFPSLabel","ZoomWithGridLayer","gridLayer","GridLayer","ZoomWithGridAndAxis","createRootContainer","createLayerContainer","marginXAxis","marginYAxis","mainGroup","select","showLabels","axis","Axis","zoom_stories","_a"],"mappings":"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"}