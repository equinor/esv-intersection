{"version":3,"file":"callout-layer.stories-cb5e6812.js","sources":["../../../../.storybook/src/features/callout-layer.stories.ts"],"sourcesContent":["import { CalloutCanvasLayer, IntersectionReferenceSystem, WellborepathLayer, Controller, ZoomPanHandler } from '../../../src';\nimport { getPicks, getPositionLog, getStratColumns } from '../data';\nimport { getPicksData, transformFormationData } from '../../../src/datautils/picks';\nimport { createLayerContainer, createRootContainer, createFPSLabel, createHelpText } from '../utils';\nconst xBounds: [number, number] = [0, 500];\nconst yBounds: [number, number] = [0, 500];\nconst xRange = 500;\nconst yRange = 500;\nconst width = 500;\nconst height = 500;\nexport const CalloutUsingLowLevelInterface = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  Promise.all([getPositionLog(), getPicks(), getStratColumns()]).then(values => {\n    const [poslog, picks, stratcolumn] = values;\n    const transformedData = transformFormationData(picks, stratcolumn);\n    const rs = new IntersectionReferenceSystem(poslog.map((p: any) => [p.easting, p.northing, p.tvd]));\n    const picksData = getPicksData(transformedData);\n    const wp = new WellborepathLayer('path', {\n      referenceSystem: rs,\n      stroke: 'red',\n      strokeWidth: '1'\n    });\n    const layer = new CalloutCanvasLayer('callout', {\n      order: 1,\n      referenceSystem: rs\n    });\n    layer.onMount({\n      elm: container\n    });\n    wp.onMount({\n      elm: container\n    });\n    layer.onUpdate({\n      data: picksData\n    });\n    const zoompanHandler = new ZoomPanHandler(container, event => {\n      layer.onRescale(event);\n      wp.onRescale(event);\n    });\n    zoompanHandler.setBounds(xBounds, yBounds);\n    zoompanHandler.adjustToSize(xRange, yRange);\n    zoompanHandler.setViewport(1500, 1500, 3000);\n  });\n  root.appendChild(createHelpText('Low level interface for creating and displaying a callout layer. We have also added a wellbore path to show the picks along its path. This layer is made using canvas.'));\n  root.appendChild(container);\n  root.appendChild(createFPSLabel());\n  return root;\n};\nexport const CalloutUsingHighLevelInterface = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  Promise.all([getPositionLog(), getPicks(), getStratColumns()]).then(values => {\n    const [poslog, picks, stratcolumn] = values;\n    const transformedData = transformFormationData(picks, stratcolumn);\n    const rs = new IntersectionReferenceSystem(poslog.map((p: any) => [p.easting, p.northing, p.tvd]));\n    const picksData = getPicksData(transformedData);\n    const wp = new WellborepathLayer('path', {\n      referenceSystem: rs,\n      stroke: 'red',\n      strokeWidth: '1'\n    });\n    const layer = new CalloutCanvasLayer('callout', {\n      order: 1,\n      data: picksData,\n      referenceSystem: rs\n    });\n    const controller = new Controller({\n      container,\n      referenceSystem: rs\n    });\n    controller.addLayer(wp);\n    controller.addLayer(layer);\n    controller.setBounds(xBounds, yBounds);\n    controller.adjustToSize(xRange, yRange);\n    controller.setViewport(1500, 1500, 3000);\n  });\n  root.appendChild(createHelpText('High level interface for creating and displaying a callout layer. We have also added a wellbore path to show the picks along its path. This layer is made using canvas.'));\n  root.appendChild(container);\n  root.appendChild(createFPSLabel());\n  return root;\n};\nexport default {\n  title: 'ESV Intersection/Features/Callout',\n  component: CalloutUsingLowLevelInterface\n};\nCalloutUsingLowLevelInterface.parameters = {\n  ...CalloutUsingLowLevelInterface.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  Promise.all([getPositionLog(), getPicks(), getStratColumns()]).then(values => {\\n    const [poslog, picks, stratcolumn] = values;\\n    const transformedData = transformFormationData(picks, stratcolumn);\\n    const rs = new IntersectionReferenceSystem(poslog.map((p: any) => [p.easting, p.northing, p.tvd]));\\n    const picksData = getPicksData(transformedData);\\n    const wp = new WellborepathLayer('path', {\\n      referenceSystem: rs,\\n      stroke: 'red',\\n      strokeWidth: '1'\\n    });\\n    const layer = new CalloutCanvasLayer('callout', {\\n      order: 1,\\n      referenceSystem: rs\\n    });\\n    layer.onMount({\\n      elm: container\\n    });\\n    wp.onMount({\\n      elm: container\\n    });\\n    layer.onUpdate({\\n      data: picksData\\n    });\\n    const zoompanHandler = new ZoomPanHandler(container, event => {\\n      layer.onRescale(event);\\n      wp.onRescale(event);\\n    });\\n    zoompanHandler.setBounds(xBounds, yBounds);\\n    zoompanHandler.adjustToSize(xRange, yRange);\\n    zoompanHandler.setViewport(1500, 1500, 3000);\\n  });\\n  root.appendChild(createHelpText('Low level interface for creating and displaying a callout layer. We have also added a wellbore path to show the picks along its path. This layer is made using canvas.'));\\n  root.appendChild(container);\\n  root.appendChild(createFPSLabel());\\n  return root;\\n}\",\n    ...CalloutUsingLowLevelInterface.parameters?.storySource\n  }\n};\nCalloutUsingHighLevelInterface.parameters = {\n  ...CalloutUsingHighLevelInterface.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  Promise.all([getPositionLog(), getPicks(), getStratColumns()]).then(values => {\\n    const [poslog, picks, stratcolumn] = values;\\n    const transformedData = transformFormationData(picks, stratcolumn);\\n    const rs = new IntersectionReferenceSystem(poslog.map((p: any) => [p.easting, p.northing, p.tvd]));\\n    const picksData = getPicksData(transformedData);\\n    const wp = new WellborepathLayer('path', {\\n      referenceSystem: rs,\\n      stroke: 'red',\\n      strokeWidth: '1'\\n    });\\n    const layer = new CalloutCanvasLayer('callout', {\\n      order: 1,\\n      data: picksData,\\n      referenceSystem: rs\\n    });\\n    const controller = new Controller({\\n      container,\\n      referenceSystem: rs\\n    });\\n    controller.addLayer(wp);\\n    controller.addLayer(layer);\\n    controller.setBounds(xBounds, yBounds);\\n    controller.adjustToSize(xRange, yRange);\\n    controller.setViewport(1500, 1500, 3000);\\n  });\\n  root.appendChild(createHelpText('High level interface for creating and displaying a callout layer. We have also added a wellbore path to show the picks along its path. This layer is made using canvas.'));\\n  root.appendChild(container);\\n  root.appendChild(createFPSLabel());\\n  return root;\\n}\",\n    ...CalloutUsingHighLevelInterface.parameters?.storySource\n  }\n};"],"names":["xBounds","yBounds","xRange","yRange","width","height","CalloutUsingLowLevelInterface","root","createRootContainer","container","createLayerContainer","getPositionLog","getPicks","getStratColumns","values","poslog","picks","stratcolumn","transformedData","transformFormationData","rs","IntersectionReferenceSystem","p","picksData","getPicksData","wp","WellborepathLayer","layer","CalloutCanvasLayer","zoompanHandler","ZoomPanHandler","event","createHelpText","createFPSLabel","CalloutUsingHighLevelInterface","controller","Controller","calloutLayer_stories","_a"],"mappings":"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"}