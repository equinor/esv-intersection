{"version":3,"file":"seismic-colormap-3a7620d2.js","sources":["../../../../src/datautils/colortable.ts","../../../../src/datautils/seismicimage.ts","../../../../src/layers/SeismicCanvasLayer.ts"],"sourcesContent":["import { scaleLinear } from 'd3-scale';\nimport { color } from 'd3-color';\n\nexport function createColorTable(colorMap: string[], size: number): number[][] {\n  const colorDomain = colorMap.map((_v, i) => (i * size) / colorMap.length);\n  const colorScale = scaleLinear<string>().domain(colorDomain).range(colorMap);\n\n  const table = Array.from(new Array(size).keys()).map((i) => {\n    const rgb = color(colorScale(i)).rgb();\n    return [rgb.r, rgb.g, rgb.b];\n  });\n\n  return table;\n}\n","import { clamp } from '@equinor/videx-math';\nimport { SeismicCanvasDataOptions } from '../layers/SeismicCanvasLayer';\n\nimport { createColorTable } from './colortable';\nimport { findIndexOfSample } from './findsample';\n\nexport type SeismicInfo = {\n  minX: number;\n  maxX: number;\n  minTvdMsl: number;\n  maxTvdMsl: number;\n  domain: {\n    min: number;\n    max: number;\n    difference: number;\n  };\n};\n\nexport const getSeismicOptions = (info: SeismicInfo | null): SeismicCanvasDataOptions => {\n  if (!info) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n  return {\n    x: info.minX,\n    y: info.minTvdMsl,\n    width: info.maxX - info.minX,\n    height: info.maxTvdMsl - info.minTvdMsl,\n  };\n};\n\n/**\n * Get key information about the seismic data\n * Code originally developed for the REP project\n * @param data Seismic data\n * @param trajectory Wellbore or freehand trajectory\n * @return  Key domain and depth information for seismic data\n */\nexport function getSeismicInfo(data: { datapoints: number[][]; yAxisValues: number[] }, trajectory: number[][]): SeismicInfo | null {\n  if (!(data && data.datapoints)) {\n    return null;\n  }\n  const minX = trajectory.reduce((acc: number, val: number[]) => Math.min(acc, val[0]), 0);\n  const maxX = trajectory.reduce((acc: number, val: number[]) => Math.max(acc, val[0]), 0);\n\n  const minTvdMsl = data.yAxisValues && data.yAxisValues[0];\n  const maxTvdMsl = data.yAxisValues && data.yAxisValues[data.yAxisValues.length - 1];\n\n  // Find value domain\n  const dp = data.datapoints || [];\n  const min = -dp.reduce((val: number, array: number[]) => Math.min(...array, val), 0);\n  const max = dp.reduce((val: number, array: number[]) => Math.max(...array, val), 0);\n\n  const absMax = Math.max(Math.abs(min), Math.abs(max));\n\n  const dmin = -absMax;\n  const dmax = absMax;\n\n  const info = {\n    minX,\n    maxX,\n    minTvdMsl,\n    maxTvdMsl,\n    domain: {\n      min: dmin,\n      max: dmax,\n      difference: dmax - dmin,\n    },\n  };\n\n  return info;\n}\n\n/**\n * Generate seismic\n * Code originally developed for the REP project\n * @param data Seismic data\n * @param trajectory Wellbore or freehand trajectory\n * @param colormap Color map for rendering\n * @param options.isLeftToRight (optional) draw left to right\n * @param options.seismicRange (optional) Range for mapping seimic values to color map\n * @param options.seismicMin (optional) Min seismic value for mapping seimic values to color map\n * @param options.seismicMax (optional) Max seismic value for mapping seimic values to color map\n * @return  Key domain and depth information for seismic data\n */\nexport async function generateSeismicSliceImage(\n  data: { datapoints: number[][]; yAxisValues: number[] },\n  trajectory: number[][],\n  colormap: string[],\n  options?: {\n    isLeftToRight: true;\n    seismicRange?: number;\n    seismicMin?: number;\n    seismicMax?: number;\n  },\n): Promise<ImageBitmap> {\n  if (!(data && data.datapoints && data.datapoints.length > 0)) {\n    return;\n  }\n  const { datapoints: dp } = data;\n\n  const min = options?.seismicMin || options?.seismicRange || dp.reduce((val: number, array: number[]) => Math.min(...array, val), 0);\n  const max = options?.seismicMax || options?.seismicRange || dp.reduce((val: number, array: number[]) => Math.max(...array, val), 0);\n\n  const absMax = Math.max(Math.abs(min), Math.abs(max));\n\n  const dmin = -absMax;\n  const dmax = absMax;\n\n  const domain = {\n    min: dmin,\n    max: dmax,\n    difference: dmax - dmin,\n  };\n\n  const length = trajectory[0][0] - trajectory[trajectory.length - 1][0];\n  // eslint-disable-next-line no-magic-numbers\n  const width = Math.abs(Math.floor(length / 5));\n  const height = data.yAxisValues.length;\n\n  // Generate color table\n  const colorTableSize = 1000;\n  const colorTable = createColorTable(colormap, colorTableSize);\n\n  // Generate image\n  const d = new Uint8ClampedArray(width * height * 4);\n\n  let offset = 0;\n  const colorFactor = (colorTableSize - 1) / domain.difference;\n\n  let pos = options?.isLeftToRight ? trajectory[0][0] : trajectory[trajectory.length - 1][0];\n\n  const step = (length / width) * (options?.isLeftToRight ? -1 : 1);\n\n  let val1;\n  let val2;\n  let val;\n  let i;\n  let col: number[];\n  const black = [0, 0, 0];\n  let opacity;\n\n  for (let x = 0; x < width; x++) {\n    offset = x * 4;\n    const index = findIndexOfSample(trajectory, pos);\n    const x1 = trajectory[index][0];\n    const x2 = trajectory[index + 1][0];\n    const span = x2 - x1;\n    const dx = pos - x1;\n    const ratio = dx / span;\n\n    for (let y = 0; y < height; y++) {\n      val1 = dp[y][index];\n      val2 = dp[y][index + 1];\n      if (val1 == null || val2 == null) {\n        col = black;\n        opacity = 0;\n      } else {\n        val = val1 * (1 - ratio) + val2 * ratio;\n        i = (val - domain.min) * colorFactor;\n        i = clamp(~~i, 0, colorTableSize - 1);\n        col = colorTable[i];\n        opacity = 255;\n      }\n\n      d.set([col[0], col[1], col[2], opacity], offset);\n\n      offset += width * 4;\n    }\n    pos += step;\n  }\n  const imageData = new ImageData(d, width, height);\n  const image = await createImageBitmap(imageData, 0, 0, width, height);\n\n  return image;\n}\n","import { CanvasLayer } from './base/CanvasLayer';\nimport { OnUpdateEvent, OnMountEvent, OnRescaleEvent } from '../interfaces';\n\nexport type SeismicCanvasDataOptions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type SeismicCanvasData = {\n  image: CanvasImageSource | OffscreenCanvas;\n  options: SeismicCanvasDataOptions;\n};\n\nexport class SeismicCanvasLayer extends CanvasLayer<SeismicCanvasData> {\n  onMount(event: OnMountEvent): void {\n    super.onMount(event);\n  }\n\n  onUpdate(event: OnUpdateEvent<SeismicCanvasData>): void {\n    super.onUpdate(event);\n\n    this.clearCanvas();\n\n    this.render();\n  }\n\n  onRescale(event: OnRescaleEvent): void {\n    super.onRescale(event);\n    this.setTransform(event);\n    this.render();\n  }\n\n  render(): void {\n    if (!this.data || !this.ctx || !this.data.image) {\n      return;\n    }\n    const { ctx } = this;\n    const { options, image } = this.data;\n\n    this.clearCanvas();\n\n    ctx.drawImage(image, options.x, options.y, options.width, options.height);\n  }\n}\n"],"names":["createColorTable","colorMap","size","colorDomain","_v","i","colorScale","scaleLinear","rgb","color","getSeismicOptions","info","getSeismicInfo","data","trajectory","minX","acc","val","maxX","minTvdMsl","maxTvdMsl","dp","min","array","max","absMax","dmin","dmax","generateSeismicSliceImage","colormap","options","domain","length","width","height","colorTableSize","colorTable","d","offset","colorFactor","pos","step","val1","val2","col","black","opacity","x","index","findIndexOfSample","x1","span","ratio","y","clamp","imageData","SeismicCanvasLayer","CanvasLayer","event","ctx","image"],"mappings":"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"}