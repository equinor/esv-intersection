{"version":3,"file":"highlight.stories.94b044db.js","sources":["../../../../src/layers/base/HTMLLayer.ts","../../../../.storybook/src/features/highlight.stories.ts"],"sourcesContent":["import { select, Selection } from 'd3-selection';\nimport { Layer } from './Layer';\nimport { OnMountEvent, OnResizeEvent } from '../../interfaces';\nimport { DEFAULT_LAYER_HEIGHT, DEFAULT_LAYER_WIDTH } from '../../constants';\n\nexport abstract class HTMLLayer<T> extends Layer<T> {\n  elm: Selection<HTMLElement, unknown, null, undefined>;\n\n  onMount(event: OnMountEvent): void {\n    super.onMount(event);\n    const { elm } = event;\n    const width = event.width || parseInt(elm.getAttribute('width'), 10) || DEFAULT_LAYER_WIDTH;\n    const height = event.height || parseInt(elm.getAttribute('height'), 10) || DEFAULT_LAYER_HEIGHT;\n\n    if (!this.elm) {\n      this.elm = select(elm).append('div');\n      this.elm.attr('id', `${this.id}`);\n      this.elm.attr('class', 'html-layer');\n    }\n    const interactive = this.interactive ? 'auto' : 'none';\n    this.elm\n      .style('position', 'absolute')\n      .style('height', `${height}px`)\n      .style('width', `${width}px`)\n      .style('opacity', this.opacity)\n      .style('overflow', 'hidden')\n      .style('pointer-events', interactive)\n      .style('z-index', this.order);\n  }\n\n  onUnmount(): void {\n    super.onUnmount();\n    this.elm.remove();\n    this.elm = null;\n  }\n\n  onResize(event: OnResizeEvent): void {\n    if (!this.elm) {\n      return;\n    }\n    super.onResize(event);\n    this.elm.style('height', `${event.height}px`).style('width', `${event.width}px`);\n  }\n\n  setVisibility(visible: boolean): void {\n    super.setVisibility(visible);\n    if (this.elm) {\n      this.elm.attr('visibility', visible ? 'visible' : 'hidden');\n    }\n  }\n\n  onOpacityChanged(opacity: number): void {\n    if (this.elm) {\n      this.elm.style('opacity', opacity);\n    }\n  }\n\n  onOrderChanged(order: number): void {\n    if (this.elm) {\n      this.elm.style('z-index', order);\n    }\n  }\n\n  onInteractivityChanged(shouldBeInteractive: boolean): void {\n    if (this.elm) {\n      const interactive = shouldBeInteractive ? 'auto' : 'none';\n      this.elm.style('pointer-events', interactive);\n    }\n  }\n}\n","import { Selection } from 'd3-selection';\nimport { WellborepathLayer, HTMLLayer } from '../../../src/layers';\nimport { OnRescaleEvent, OnMountEvent } from '../../../src/interfaces';\nimport { IntersectionReferenceSystem, Controller } from '../../../src/control';\nimport { ZoomPanHandler } from '../../../src/control/ZoomPanHandler';\nimport { createRootContainer, createLayerContainer, createFPSLabel } from '../utils';\nimport { getWellborePath } from '../data';\nconst POINTHEIGHT = 5;\nconst POINTWIDTH = 5;\nconst POINTPADDING = 2;\nconst POINTOFFSETX = (POINTWIDTH + POINTPADDING) / 2;\nconst POINTOFFSETY = (POINTHEIGHT + POINTPADDING) / 2;\nconst width = 700;\nconst height = 600;\nconst xbounds: number[] = [0, 1000];\nconst ybounds: number[] = [0, 1000];\nconst scaleOptions = {\n  xMin: xbounds[0],\n  xMax: xbounds[1],\n  yMin: ybounds[0],\n  yMax: ybounds[1]\n};\nconst axisOptions = {\n  xLabel: 'Displacement',\n  yLabel: 'TVD MSL',\n  unitOfMeasure: 'm'\n};\nexport const HighlightWellborepath = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  getWellborePath().then(data => {\n    const referenceSystem = new IntersectionReferenceSystem(data);\n    const layer = new WellborepathLayer('wellborepath', {\n      order: 3,\n      strokeWidth: '2px',\n      stroke: 'red',\n      referenceSystem\n    });\n    layer.onMount({\n      elm: container\n    });\n    layer.onUpdate({});\n    const highlightLayer = new HighlightLayer('pointhighlighter', {\n      order: 105,\n      referenceSystem,\n      layerOpacity: 0.5\n    });\n    highlightLayer.onMount({\n      elm: container,\n      width,\n      height\n    });\n    const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\n      layer.onRescale({\n        ...event\n      });\n      highlightLayer.onRescale({\n        ...event\n      });\n    });\n    zoomHandler.setBounds([0, 1000], [0, 1000]);\n    zoomHandler.adjustToSize(width, height);\n    zoomHandler.zFactor = 1;\n    zoomHandler.setTranslateBounds([-5000, 6000], [-5000, 6000]);\n    zoomHandler.enableTranslateExtent = false;\n    zoomHandler.setViewport(1000, 1000, 5000);\n    highlightLayer.onRescale(zoomHandler.currentStateAsEvent());\n    const slider = createSlider((event: any) => onUpdate(event, {\n      rescaleEvent: zoomHandler.currentStateAsEvent(),\n      layer: highlightLayer\n    }), {\n      width,\n      min: 0,\n      max: referenceSystem.length\n    });\n    root.appendChild(container);\n    root.appendChild(slider);\n    root.appendChild(createFPSLabel());\n  });\n  return root;\n};\nexport const HighlightWellborepathWithController = () => {\n  const root = createRootContainer(width);\n  const container = createLayerContainer(width, height);\n  getWellborePath().then(data => {\n    const referenceSystem = new IntersectionReferenceSystem(data);\n    const layer = new WellborepathLayer('wellborepath', {\n      order: 3,\n      strokeWidth: '2px',\n      stroke: 'red',\n      referenceSystem\n    });\n    const controller = new Controller({\n      referenceSystem,\n      axisOptions,\n      scaleOptions,\n      container\n    });\n    const highlightLayer = new HighlightLayer('pointhighlighter', {\n      order: 105,\n      referenceSystem,\n      layerOpacity: 0.5\n    });\n    controller.addLayer(layer).addLayer(highlightLayer);\n    controller.setBounds([0, 1000], [0, 1000]);\n    controller.adjustToSize(width, height);\n    controller.setViewport(1000, 1000, 5000);\n\n    // external event that calls the rescale event the highlighting should change\n    const slider = createSlider((event: any) => onUpdate(event, {\n      rescaleEvent: controller.currentStateAsEvent,\n      layer: highlightLayer\n    }), {\n      width,\n      min: -1000,\n      max: controller.referenceSystem.length + 1000\n    });\n    root.appendChild(container);\n    root.appendChild(slider);\n    root.appendChild(createFPSLabel());\n  });\n  return root;\n};\nclass HighlightLayer<T> extends HTMLLayer<T> {\n  elements: Selection<HTMLDivElement, unknown, null, undefined>[] = [];\n  elementCurveLength: number = 0;\n  onMount(event: OnMountEvent): void {\n    super.onMount(event);\n    this.addHighlightElement('wellborepath');\n  }\n  onRescale(event: OnRescaleEvent): void {\n    super.onRescale(event);\n    const elm = this.elements[0];\n    if (this.referenceSystem) {\n      // returns coords in [displacement, tvd]\n      const coords = this.referenceSystem.project(this.elementCurveLength);\n\n      // screen coords inside the container\n      const newX = event.xScale(coords[0]);\n      const newY = event.yScale(coords[1]);\n      elm.style('left', `${newX - POINTOFFSETX}px`);\n      elm.style('top', `${newY - POINTOFFSETY}px`);\n    }\n  }\n  addHighlightElement(id: string): HighlightLayer<T> {\n    const elm = this.elm.append('div').attr('id', `${id}-highlight`);\n    elm.style('visibility', 'visible');\n    elm.style('height', `${POINTHEIGHT}px`);\n    elm.style('width', `${POINTWIDTH}px`);\n    elm.style('display', 'inline-block');\n    elm.style('padding', `${POINTPADDING}px`);\n    elm.style('border-radius', '4px');\n    elm.style('position', 'absolute');\n    elm.style('background-color', 'red');\n    this.elements = [elm];\n    return this;\n  }\n  getElement(id: string): Selection<HTMLElement, any, null, undefined> {\n    return this.elm.select(id);\n  }\n  onUpdateCurveLength(curveLength: number) {\n    this.elementCurveLength = curveLength;\n  }\n}\nconst onUpdate = (event: InputEvent, obj: any) => {\n  obj.layer.onUpdateCurveLength(Number(event.target!['value']));\n  obj.layer.onRescale(obj.rescaleEvent);\n};\nconst createSlider = (cb: any, opts: any) => {\n  const slider = document.createElement('input');\n  let val = 0;\n  slider.type = 'range';\n  slider.value = val.toString();\n  slider.min = `${opts.min || 0}`;\n  slider.max = `${opts.max || 10}`;\n  slider.setAttribute('style', `width:${opts.width}px`);\n  slider.oninput = cb;\n  return slider;\n};\nexport default {\n  title: 'ESV Intersection/Features/Highlight',\n  component: HighlightWellborepath\n};\nHighlightWellborepath.parameters = {\n  ...HighlightWellborepath.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  getWellborePath().then(data => {\\n    const referenceSystem = new IntersectionReferenceSystem(data);\\n    const layer = new WellborepathLayer('wellborepath', {\\n      order: 3,\\n      strokeWidth: '2px',\\n      stroke: 'red',\\n      referenceSystem\\n    });\\n    layer.onMount({\\n      elm: container\\n    });\\n    layer.onUpdate({});\\n    const highlightLayer = new HighlightLayer('pointhighlighter', {\\n      order: 105,\\n      referenceSystem,\\n      layerOpacity: 0.5\\n    });\\n    highlightLayer.onMount({\\n      elm: container,\\n      width,\\n      height\\n    });\\n    const zoomHandler = new ZoomPanHandler(container, (event: OnRescaleEvent) => {\\n      layer.onRescale({\\n        ...event\\n      });\\n      highlightLayer.onRescale({\\n        ...event\\n      });\\n    });\\n    zoomHandler.setBounds([0, 1000], [0, 1000]);\\n    zoomHandler.adjustToSize(width, height);\\n    zoomHandler.zFactor = 1;\\n    zoomHandler.setTranslateBounds([-5000, 6000], [-5000, 6000]);\\n    zoomHandler.enableTranslateExtent = false;\\n    zoomHandler.setViewport(1000, 1000, 5000);\\n    highlightLayer.onRescale(zoomHandler.currentStateAsEvent());\\n    const slider = createSlider((event: any) => onUpdate(event, {\\n      rescaleEvent: zoomHandler.currentStateAsEvent(),\\n      layer: highlightLayer\\n    }), {\\n      width,\\n      min: 0,\\n      max: referenceSystem.length\\n    });\\n    root.appendChild(container);\\n    root.appendChild(slider);\\n    root.appendChild(createFPSLabel());\\n  });\\n  return root;\\n}\",\n    ...HighlightWellborepath.parameters?.storySource\n  }\n};\nHighlightWellborepathWithController.parameters = {\n  ...HighlightWellborepathWithController.parameters,\n  storySource: {\n    source: \"() => {\\n  const root = createRootContainer(width);\\n  const container = createLayerContainer(width, height);\\n  getWellborePath().then(data => {\\n    const referenceSystem = new IntersectionReferenceSystem(data);\\n    const layer = new WellborepathLayer('wellborepath', {\\n      order: 3,\\n      strokeWidth: '2px',\\n      stroke: 'red',\\n      referenceSystem\\n    });\\n    const controller = new Controller({\\n      referenceSystem,\\n      axisOptions,\\n      scaleOptions,\\n      container\\n    });\\n    const highlightLayer = new HighlightLayer('pointhighlighter', {\\n      order: 105,\\n      referenceSystem,\\n      layerOpacity: 0.5\\n    });\\n    controller.addLayer(layer).addLayer(highlightLayer);\\n    controller.setBounds([0, 1000], [0, 1000]);\\n    controller.adjustToSize(width, height);\\n    controller.setViewport(1000, 1000, 5000);\\n\\n    // external event that calls the rescale event the highlighting should change\\n    const slider = createSlider((event: any) => onUpdate(event, {\\n      rescaleEvent: controller.currentStateAsEvent,\\n      layer: highlightLayer\\n    }), {\\n      width,\\n      min: -1000,\\n      max: controller.referenceSystem.length + 1000\\n    });\\n    root.appendChild(container);\\n    root.appendChild(slider);\\n    root.appendChild(createFPSLabel());\\n  });\\n  return root;\\n}\",\n    ...HighlightWellborepathWithController.parameters?.storySource\n  }\n};"],"names":["HTMLLayer","Layer","__publicField","event","elm","width","DEFAULT_LAYER_WIDTH","height","DEFAULT_LAYER_HEIGHT","select","interactive","visible","opacity","order","shouldBeInteractive","POINTHEIGHT","POINTWIDTH","POINTPADDING","POINTOFFSETX","POINTOFFSETY","xbounds","ybounds","scaleOptions","axisOptions","HighlightWellborepath","root","createRootContainer","container","createLayerContainer","getWellborePath","data","referenceSystem","IntersectionReferenceSystem","layer","WellborepathLayer","highlightLayer","HighlightLayer","zoomHandler","ZoomPanHandler","slider","createSlider","onUpdate","createFPSLabel","HighlightWellborepathWithController","controller","Controller","coords","newX","newY","id","curveLength","obj","cb","opts","val","highlight_stories","_a"],"mappings":"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"}