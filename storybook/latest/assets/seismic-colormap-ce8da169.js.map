{"version":3,"file":"seismic-colormap-ce8da169.js","sources":["../../../../src/datautils/colortable.ts","../../../../src/datautils/seismicimage.ts","../../../../src/layers/SeismicCanvasLayer.ts"],"sourcesContent":["import { scaleLinear } from 'd3-scale';\nimport { color } from 'd3-color';\n\nexport function createColorTable(colorMap: string[], size: number): [number, number, number][] {\n  const colorDomain = colorMap.map((_v, i) => (i * size) / colorMap.length);\n  const colorScale = scaleLinear<string>().domain(colorDomain).range(colorMap);\n\n  const table = Array.from(new Array(size).keys()).map<[number, number, number]>((i) => {\n    const rgb = color(colorScale(i))?.rgb();\n    return rgb != null ? [rgb.r, rgb.g, rgb.b] : [0, 0, 0];\n  });\n\n  return table;\n}\n","import { clamp } from '@equinor/videx-math';\nimport { SeismicCanvasDataOptions } from '../layers/SeismicCanvasLayer';\n\nimport { createColorTable } from './colortable';\nimport { findIndexOfSample } from './findsample';\n\nexport type SeismicInfo = {\n  minX: number;\n  maxX: number;\n  minTvdMsl: number;\n  maxTvdMsl: number;\n  domain: {\n    min: number;\n    max: number;\n    difference: number;\n  };\n};\n\nexport const getSeismicOptions = (info: SeismicInfo | null): SeismicCanvasDataOptions => {\n  if (!info) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n  return {\n    x: info.minX,\n    y: info.minTvdMsl,\n    width: info.maxX - info.minX,\n    height: info.maxTvdMsl - info.minTvdMsl,\n  };\n};\n\n/**\n * Get key information about the seismic data\n * Code originally developed for the REP project\n * @param data Seismic data\n * @param trajectory Wellbore or freehand trajectory\n * @return  Key domain and depth information for seismic data\n */\nexport function getSeismicInfo(data: { datapoints: number[][]; yAxisValues: number[] }, trajectory: number[][]): SeismicInfo | null {\n  if (!(data && data.datapoints)) {\n    return null;\n  }\n  const minX = trajectory.reduce((acc: number, val: number[]) => Math.min(acc, val[0]!), 0);\n  const maxX = trajectory.reduce((acc: number, val: number[]) => Math.max(acc, val[0]!), 0);\n\n  const minTvdMsl = data.yAxisValues && data.yAxisValues[0]!;\n  const maxTvdMsl = data.yAxisValues && data.yAxisValues[data.yAxisValues.length - 1]!;\n\n  // Find value domain\n  const dp = data.datapoints || [];\n  const min = -dp.reduce((val: number, array: number[]) => Math.min(...array, val), 0);\n  const max = dp.reduce((val: number, array: number[]) => Math.max(...array, val), 0);\n\n  const absMax = Math.max(Math.abs(min), Math.abs(max));\n\n  const dmin = -absMax;\n  const dmax = absMax;\n\n  const info = {\n    minX,\n    maxX,\n    minTvdMsl,\n    maxTvdMsl,\n    domain: {\n      min: dmin,\n      max: dmax,\n      difference: dmax - dmin,\n    },\n  };\n\n  return info;\n}\n\n/**\n * Generate seismic\n * Code originally developed for the REP project\n * @param data Seismic data\n * @param trajectory Wellbore or freehand trajectory\n * @param colormap Color map for rendering\n * @param options.isLeftToRight (optional) draw left to right\n * @param options.seismicRange (optional) Range for mapping seimic values to color map\n * @param options.seismicMin (optional) Min seismic value for mapping seimic values to color map\n * @param options.seismicMax (optional) Max seismic value for mapping seimic values to color map\n * @return  Key domain and depth information for seismic data\n */\nexport async function generateSeismicSliceImage(\n  data: { datapoints: number[][]; yAxisValues: number[] },\n  trajectory: number[][],\n  colormap: string[],\n  options: {\n    isLeftToRight: boolean;\n    seismicRange?: number;\n    seismicMin?: number;\n    seismicMax?: number;\n  } = { isLeftToRight: true },\n): Promise<ImageBitmap | undefined> {\n  if (!(data && data.datapoints && data.datapoints.length > 0)) {\n    return undefined;\n  }\n  const { datapoints: dp } = data;\n\n  const min = options?.seismicMin || options?.seismicRange || dp.reduce((val: number, array: number[]) => Math.min(...array, val), 0);\n  const max = options?.seismicMax || options?.seismicRange || dp.reduce((val: number, array: number[]) => Math.max(...array, val), 0);\n\n  const absMax = Math.max(Math.abs(min), Math.abs(max));\n\n  const dmin = -absMax;\n  const dmax = absMax;\n\n  const domain = {\n    min: dmin,\n    max: dmax,\n    difference: dmax - dmin,\n  };\n\n  const length = trajectory[0]?.[0]! - trajectory[trajectory.length - 1]?.[0]!;\n  const width = Math.abs(Math.floor(length / 5));\n  const height = data.yAxisValues.length;\n\n  // Generate color table\n  const colorTableSize = 1000;\n  const colorTable = createColorTable(colormap, colorTableSize);\n\n  // Generate image\n  const d = new Uint8ClampedArray(width * height * 4);\n\n  let offset = 0;\n  const colorFactor = (colorTableSize - 1) / domain.difference;\n\n  let pos = options?.isLeftToRight ? trajectory[0]?.[0]! : trajectory[trajectory.length - 1]?.[0]!;\n\n  const step = (length / width) * (options?.isLeftToRight ? -1 : 1);\n\n  let val1: number;\n  let val2: number;\n  let val: number;\n  let i: number;\n  let col: number[];\n  const black = [0, 0, 0];\n  let opacity: number;\n\n  for (let x = 0; x < width; x++) {\n    offset = x * 4;\n    const index = findIndexOfSample(trajectory, pos);\n    const x1 = trajectory[index]?.[0]!;\n    const x2 = trajectory[index + 1]?.[0]!;\n    const span = x2 - x1;\n    const dx = pos - x1;\n    const ratio = dx / span;\n\n    for (let y = 0; y < height; y++) {\n      val1 = dp[y]?.[index]!;\n      val2 = dp[y]?.[index + 1]!;\n      if (val1 == null || val2 == null) {\n        col = black;\n        opacity = 0;\n      } else {\n        val = val1 * (1 - ratio) + val2 * ratio;\n        i = (val - domain.min) * colorFactor;\n        i = clamp(~~i, 0, colorTableSize - 1);\n        col = colorTable[i]!;\n        opacity = 255;\n      }\n\n      d.set([col[0]!, col[1]!, col[2]!, opacity], offset);\n\n      offset += width * 4;\n    }\n    pos += step;\n  }\n  const imageData = new ImageData(d, width, height);\n  const image = await createImageBitmap(imageData, 0, 0, width, height);\n\n  return image;\n}\n","import { CanvasLayer } from './base/CanvasLayer';\nimport { OnUpdateEvent, OnMountEvent, OnRescaleEvent } from '../interfaces';\n\nexport type SeismicCanvasDataOptions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type SeismicCanvasData = {\n  image: CanvasImageSource | OffscreenCanvas;\n  options: SeismicCanvasDataOptions;\n};\n\nexport class SeismicCanvasLayer extends CanvasLayer<SeismicCanvasData> {\n  override onMount(event: OnMountEvent): void {\n    super.onMount(event);\n  }\n\n  override onUpdate(event: OnUpdateEvent<SeismicCanvasData>): void {\n    super.onUpdate(event);\n\n    this.clearCanvas();\n\n    this.render();\n  }\n\n  override onRescale(event: OnRescaleEvent): void {\n    super.onRescale(event);\n    this.setTransform(event);\n    this.render();\n  }\n\n  render(): void {\n    if (!this.data || !this.ctx || !this.data.image) {\n      return;\n    }\n    const { ctx } = this;\n    const { options, image } = this.data;\n\n    this.clearCanvas();\n\n    ctx.drawImage(image, options.x, options.y, options.width, options.height);\n  }\n}\n"],"names":["createColorTable","colorMap","size","colorDomain","_v","i","colorScale","scaleLinear","rgb","_a","color","getSeismicOptions","info","getSeismicInfo","data","trajectory","minX","acc","val","maxX","minTvdMsl","maxTvdMsl","dp","min","array","max","absMax","dmin","dmax","generateSeismicSliceImage","colormap","options","domain","length","_b","width","height","colorTableSize","colorTable","d","offset","colorFactor","pos","_c","_d","step","val1","val2","col","black","opacity","x","index","findIndexOfSample","x1","_e","span","_f","ratio","y","_g","_h","clamp","imageData","SeismicCanvasLayer","CanvasLayer","event","ctx","image"],"mappings":"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"}