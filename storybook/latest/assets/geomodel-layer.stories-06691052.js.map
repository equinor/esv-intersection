{"version":3,"file":"geomodel-layer.stories-06691052.js","sources":["../../../../src/layers/GeomodelCanvasLayer.ts"],"sourcesContent":["import { SurfaceArea, SurfaceData, SurfaceLine } from '../datautils';\nimport { OnUpdateEvent, OnRescaleEvent } from '../interfaces';\nimport { colorToCSSColor } from '../utils/color';\nimport { LayerOptions } from './base';\nimport { CanvasLayer } from './base/CanvasLayer';\n\nconst DEFAULT_MAX_DEPTH = 10000;\n\ntype SurfacePaths = {\n  color: string;\n  path: Path2D;\n};\n\nexport class GeomodelCanvasLayer<T extends SurfaceData> extends CanvasLayer<T> {\n  rescaleEvent: OnRescaleEvent | undefined;\n\n  surfaceAreasPaths: SurfacePaths[] = [];\n\n  surfaceLinesPaths: SurfacePaths[] = [];\n\n  maxDepth: number = DEFAULT_MAX_DEPTH;\n\n  constructor(id?: string, options?: LayerOptions<T>) {\n    super(id, options);\n    this.render = this.render.bind(this);\n    this.generateSurfaceAreasPaths = this.generateSurfaceAreasPaths.bind(this);\n    this.generateSurfaceLinesPaths = this.generateSurfaceLinesPaths.bind(this);\n    this.drawPolygonPath = this.drawPolygonPath.bind(this);\n    this.drawLinePath = this.drawLinePath.bind(this);\n    this.updatePaths = this.updatePaths.bind(this);\n  }\n\n  override onUpdate(event: OnUpdateEvent<T>): void {\n    super.onUpdate(event);\n    this.updatePaths();\n    this.render();\n  }\n\n  override onRescale(event: OnRescaleEvent): void {\n    this.rescaleEvent = event;\n    this.setTransform(this.rescaleEvent);\n    this.render();\n  }\n\n  updatePaths(): void {\n    if (!this.data) {\n      this.surfaceAreasPaths = [];\n      this.surfaceLinesPaths = [];\n    } else {\n      this.generateSurfaceAreasPaths();\n      this.generateSurfaceLinesPaths();\n    }\n  }\n\n  render(): void {\n    if (!this.ctx || !this.rescaleEvent) {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.clearCanvas();\n      this.surfaceAreasPaths.forEach((p: SurfacePaths) => this.drawPolygonPath(p.color, p.path));\n      this.surfaceLinesPaths.forEach((l: SurfacePaths) => this.drawLinePath(l.color, l.path));\n    });\n  }\n\n  colorToCSSColor(color: number | string): string {\n    return colorToCSSColor(color);\n  }\n\n  generateSurfaceAreasPaths(): void {\n    this.surfaceAreasPaths =\n      this.data?.areas.reduce((acc: SurfacePaths[], s: SurfaceArea) => {\n        const polygons = this.createPolygons(s.data);\n        const mapped: SurfacePaths[] = polygons.map((polygon: number[]) => ({\n          color: this.colorToCSSColor(s.color),\n          path: this.generatePolygonPath(polygon),\n        }));\n        acc.push(...mapped);\n        return acc;\n      }, []) ?? [];\n  }\n\n  generateSurfaceLinesPaths(): void {\n    this.surfaceLinesPaths =\n      this.data?.lines.reduce((acc: SurfacePaths[], l: SurfaceLine) => {\n        const lines = this.generateLinePaths(l);\n        const mapped: SurfacePaths[] = lines.map((path: Path2D) => ({ color: this.colorToCSSColor(l.color), path }));\n        acc.push(...mapped);\n        return acc;\n      }, []) ?? [];\n  }\n\n  drawPolygonPath = (color: string, path: Path2D): void => {\n    const { ctx } = this;\n    if (ctx != null) {\n      ctx.fillStyle = color;\n      ctx.fill(path);\n    }\n  };\n\n  drawLinePath = (color: string, path: Path2D): void => {\n    const { ctx } = this;\n\n    if (ctx != null) {\n      ctx.strokeStyle = color;\n      ctx.stroke(path);\n    }\n  };\n\n  createPolygons = (data: number[][]): number[][] => {\n    const polygons: number[][] = [];\n    let polygon: number[] = [];\n\n    // Start generating polygons\n    for (let i = 0; i < data.length; i++) {\n      // Generate top of polygon as long as we have valid values\n      const topIsValid = !!data[i]?.[1];\n      if (topIsValid) {\n        if (polygon === null) {\n          polygon = [];\n        }\n        polygon.push(data[i]?.[0]!, data[i]?.[1]!);\n      }\n\n      const endIsReached = i === data.length - 1;\n      if (!topIsValid || endIsReached) {\n        if (polygon.length > 0) {\n          // Generate bottom of polygon\n          for (let j: number = !topIsValid ? i - 1 : i; j >= 0; j--) {\n            if (!data[j]?.[1]) {\n              break;\n            }\n            polygon.push(data[j]?.[0]!, data[j]?.[2] || this.maxDepth);\n          }\n          polygons.push(polygon);\n          polygon = [];\n        }\n      }\n    }\n\n    return polygons;\n  };\n\n  generatePolygonPath = (polygon: number[]): Path2D => {\n    const path = new Path2D();\n\n    path.moveTo(polygon[0]!, polygon[1]!);\n    for (let i = 2; i < polygon.length; i += 2) {\n      path.lineTo(polygon[i]!, polygon[i + 1]!);\n    }\n    path.closePath();\n\n    return path;\n  };\n\n  generateLinePaths = (s: SurfaceLine): Path2D[] => {\n    const paths: Path2D[] = [];\n    const { data: d } = s;\n\n    let penDown = false;\n    let path: Path2D | undefined;\n    for (let i = 0; i < d.length; i++) {\n      if (d[i]?.[1]) {\n        if (penDown && path) {\n          path.lineTo(d[i]?.[0]!, d[i]?.[1]!);\n        } else {\n          path = new Path2D();\n          path.moveTo(d[i]?.[0]!, d[i]?.[1]!);\n          penDown = true;\n        }\n      } else if (penDown && path) {\n        paths.push(path);\n        penDown = false;\n      }\n    }\n    if (penDown && path) {\n      paths.push(path);\n    }\n\n    return paths;\n  };\n}\n"],"names":["DEFAULT_MAX_DEPTH","GeomodelCanvasLayer","CanvasLayer","id","options","color","path","ctx","data","polygons","polygon","i","topIsValid","_a","_b","_c","endIsReached","j","_d","_e","_f","s","paths","d","penDown","event","p","l","colorToCSSColor","acc","mapped"],"mappings":"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"}